(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6637],{4823:function(e,a,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/hooks/useObservablePaginated",function(){return n(25541)}])},25541:function(e,a,n){"use strict";n.r(a),n.d(a,{default:function(){return i},meta:function(){return t}});var r=n(31373);n(27378);var o=n(35318),t={name:"useObservablePaginated",tableOfContents:{depth:0,children:[{depth:1,slug:"#useobservablepaginated",title:"useObservablePaginated",children:[{depth:2,slug:"#como-usar",title:"Como usar"},{depth:2,slug:"#cuidados",title:"Cuidados"},{depth:2,slug:"#par\xe2metros-e-retorno",title:"Par\xe2metros e Retorno"}]}]}},s={meta:t};function i(e){var a=e.components,n=(0,r.Z)(e,["components"]);return(0,o.kt)("wrapper",Object.assign({},s,n,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h1",Object.assign({},{id:"useobservablepaginated"}),"useObservablePaginated"),(0,o.kt)("p",null,"Hook para facilitar o uso de um observable paginado, d\xe1 Subscribe e retorna\no resultado junto com fun\xe7\xf5es de manipula\xe7\xe3o dos parametros."),(0,o.kt)("h2",Object.assign({},{id:"como-usar"}),"Como usar"),(0,o.kt)("pre",null,(0,o.kt)("code",Object.assign({parentName:"pre"},{className:"language-tsx"}),"const { params, handleChangePage, handleChangePerPage, handleSort, result, total, isLoading } = useObservablePaginated(\n  {\n    initialParams: { page: 1, perPage: 5 }, // optional\n    infinityScroll: false, // optional\n    onChangeParams: params => salesService.list(params)\n  },\n  []\n);\n")),(0,o.kt)("h2",Object.assign({},{id:"cuidados"}),"Cuidados"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Erros")," ocorridos ser\xe3o automaticamentes logados (n\xe3o tratados) se as o ",(0,o.kt)("strong",{parentName:"li"},"onUnhandledError")," no ",(0,o.kt)("strong",{parentName:"li"},"setHoustonHooksConfig"),"\nfor setado, mas se utilizar o operador catchError esse erro n\xe3o ser\xe1 logado pois foi previamente tratado,\nnesse caso o log deve ser feito manualmente.")),(0,o.kt)("h2",Object.assign({},{id:"par\xe2metros-e-retorno"}),"Par\xe2metros e Retorno"),(0,o.kt)("pre",null,(0,o.kt)("code",Object.assign({parentName:"pre"},{className:"language-ts"}),"/**\n * @param options `IUsePaginatedOptions`: {\n *  initialParams: Estado inicial dos param\xeatros\n *  infinityScroll: Se os resultados devem ser mergeado, criando uma lista infinita.\n *  onChangeParams: Fun\xe7\xe3o que recebe os param\xeatros e retorna um Observable\n * }\n * @param deps React deps\n * @returns `IUsePaginatedObservable`: {\n *  params: P / Json com os parametros\n *  initialParams: Partial<P> / Json com os parametros iniciais, \xfatil para um reset de filtros\n *  isLoading: boolean; / Se est\xe1 carregando ou n\xe3o\n *  isLoadingMore: boolean; / Se est\xe1 carregando mais ou n\xe3o, \xfatil para o infinityScroll\n *  total: number; / N\xfamero total de linhas retornadas, apenas a requisi\xe7\xe3o da pagina inicial \xe9 necess\xe1rio retornar o total, as outras paginas podem retonar null\n *  result: R[]; / Array com o resultado\n *  hasMore: boolean; / Se existe mais para ser carregado, calculado com base do total, \xfatil para o infinityScroll\n *  error: any; / Error, se aconteceu algum\n *  retry: () => void; / Fun\xe7\xe3o de retry\n *  updateInitialParams: React.Dispatch<React.SetStateAction<P>>; / \xdatil para alterar o reset de um filtro\n *  mergeParams: (params: PaginationMergeParams<P>) => void; / Fun\xe7\xe3o para atualizar os paramentros pode ser o valor em s\xed o uma fun\xe7\xe3o que recebe o valor atual\n *  handleChangePage: (page: number) => void; / Fun\xe7\xe3o de atalho para o mergeParams({ page: 1})\n *  handleChangePerPage: (perPage: number) => void; / Fun\xe7\xe3o de atalho para o mergeParams({ perPge: 1})\n *  handleSort: (sort: IPaginationParams['sort']) => void; / Fun\xe7\xe3o de atalho para o mergeParams({ sort: { field: 'name', direction: 'asc' }  })\n * }\n */\nexport default function useObservablePaginated<P extends IPaginationParams, R>(options: IUsePaginatedOptions<P, R>, , deps: React.DependencyList): IUsePaginatedObservable<P, R>\n")))}i.isMDXComponent=!0;var l={editThisPagePath:"src/pages/hooks/useObservablePaginated/index.mdx"};for(var d in l)window[d]=l[d]},31373:function(e,a,n){"use strict";function r(e,a){if(null==e)return{};var n,r,o=function(e,a){if(null==e)return{};var n,r,o={},t=Object.keys(e);for(r=0;r<t.length;r++)n=t[r],a.indexOf(n)>=0||(o[n]=e[n]);return o}(e,a);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(r=0;r<t.length;r++)n=t[r],!(a.indexOf(n)>=0)&&Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}n.d(a,{Z:function(){return r}})}},function(e){e.O(0,[9774,2888,179],function(){return e(e.s=4823)}),_N_E=e.O()}]);