(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[708],{15694:function(a,b,c){(window.__NEXT_P=window.__NEXT_P||[]).push(["/hooks/usePromiseCallback",function(){return c(27212)}])},27212:function(a,b,c){"use strict";c.r(b),c.d(b,{default:function(){return n},meta:function(){return l}});var d=c(31373),e=c(3204),f=c(27378),g=c(35318),h=c(56100),i=c(30222),j=c(38861),k=c(20898),l={name:"usePromiseCallback",tableOfContents:{depth:0,children:[{depth:1,slug:"#usepromisecallback",title:"usePromiseCallback",children:[{depth:2,slug:"#como-usar",title:"Como usar"},{depth:2,slug:"#cuidados",title:"Cuidados"},{depth:2,slug:"#par\xe2metros-e-retorno",title:"Par\xe2metros e Retorno"}]}]}},m={meta:l};function n(a){var b=a.components,c=(0,d.Z)(a,["components"]);return(0,g.kt)("wrapper",Object.assign({},m,c,{components:b,mdxType:"MDXLayout"}),(0,g.kt)("h1",Object.assign({},{id:"usepromisecallback"}),"usePromiseCallback"),(0,g.kt)("p",null,"Retorn um callback que dar\xe1 Subscribe e retornar\xe1 o resultado de uma promise e quando o componente desmonta (unmount) tamb\xe9m d\xe1\nunsubscribe, diminuindo assim o risco de Memory Leak. ",(0,g.kt)("strong",{parentName:"p"},"Como useEffect que retorna o valor da Promise")),(0,g.kt)("h2",Object.assign({},{id:"como-usar"}),"Como usar"),(0,g.kt)("pre",null,(0,g.kt)("code",Object.assign({parentName:"pre"},{className:"language-tsx"}),"const [loading, setLoading] = useState();\nconst callback = usePromiseCallback(async isSubscribe => {\n  setLoading(true);\n  await userService.get();\n  // Se for setar um estado sempre verifique o isSubscribe, para evitar Memory Leak, e subsequentes chamadas\n  // far\xe3o que chamadas anteriores n\xe3o alterem estados.\n  if (isSubscribe()) setLoading(false);\n}, []);\n\nreturn (\n  <div>\n    {loading ? 'Carregando' : ''}\n    <button onClick={callback}>iniciar</button>\n  </div>\n);\n")),(0,g.kt)("p",null,"Veja o exemplo abaixo:"),(0,g.kt)(h.X,{__position:0,code:"() => {\n  const callCounter = useRef(0)\n  const [reset, setReset] = useState()\n  const [loading, setLoading] = useState(false)\n  const [completed, setCompleted] = useState([])\n  const [ignored, setIgnored] = useState([])\n  const callback = usePromiseCallback(\n    (isSubscribe) => {\n      const currentCall = ++callCounter.current\n      setLoading(true)\n      return new Promise((resolve) =>\n        setTimeout(() => resolve('ol\xe1'), 2000),\n      ).then(() => {\n        if (isSubscribe()) {\n          setLoading(false)\n          setCompleted((completed) => [...completed, currentCall])\n        } else {\n          setIgnored((ignored) => [...ignored, currentCall])\n        }\n      })\n    },\n    [reset],\n  )\n  return (\n    <div>\n      <p>Loading: {loading.toString()}</p>\n      <p>cliques completos: {JSON.stringify(completed)}</p>\n      <p>cliques ignorados: {JSON.stringify(ignored)}</p>\n      <Button onClick={callback}>\n        Iniciar (Tente clicar mais de uma vez)\n      </Button>\n    </div>\n  )\n}",scope:{props:c,useState:f.useState,useCallback:f.useCallback,useRef:f.useRef,Playground:h.X,Button:i.default,Typography:j.default,usePromiseCallback:k.default,meta:l},mdxType:"Playground"},function(){var a=(0,f.useRef)(0),b=(0,f.useState)(),c=b[0];b[1];var d=(0,f.useState)(!1),h=d[0],j=d[1],l=(0,f.useState)([]),m=l[0],n=l[1],o=(0,f.useState)([]),p=o[0],q=o[1],r=(0,k.default)(function(b){var c=++a.current;return j(!0),new Promise(function(a){return setTimeout(function(){return a("ol\xe1")},2e3)}).then(function(){b()?(j(!1),n(function(a){return(0,e.Z)(a).concat([c])})):q(function(a){return(0,e.Z)(a).concat([c])})})},[c]);return(0,g.kt)("div",null,(0,g.kt)("p",null,"Loading: ",h.toString()),(0,g.kt)("p",null,"cliques completos: ",JSON.stringify(m)),(0,g.kt)("p",null,"cliques ignorados: ",JSON.stringify(p)),(0,g.kt)(i.default,{onClick:r,mdxType:"Button"},"Iniciar (Tente clicar mais de uma vez)"))}),(0,g.kt)("h2",Object.assign({},{id:"cuidados"}),"Cuidados"),(0,g.kt)("ul",null,(0,g.kt)("li",{parentName:"ul"},(0,g.kt)("strong",{parentName:"li"},"Erros")," ocorridos ser\xe3o automaticamentes logados e as o ",(0,g.kt)("strong",{parentName:"li"},"onUnhandledError")," no ",(0,g.kt)("strong",{parentName:"li"},"setHoustonHooksConfig"),"\nfor setado.")),(0,g.kt)("h2",Object.assign({},{id:"par\xe2metros-e-retorno"}),"Par\xe2metros e Retorno"),(0,g.kt)("pre",null,(0,g.kt)("code",Object.assign({parentName:"pre"},{className:"language-ts"}),"/**\n * @param promiseCallback Fun\xe7\xe3o que retorna uma Promise, pode receber parametros\n * @param deps Lista de depend\xeancias\n * @returns [\n *    callback: callback para iniciar a promise,\n *    value: valor de retorno do Promise,\n *    error: se ocorrer um erro, ele ser\xe1 passado aqui,\n *    loading: boolean se esta carregando ou n\xe3o\n * ]\n */\nexport default function usePromiseCallback<T, F extends (...args: any[]) => Promise<T>>(\n  promiseCallback: F,\n  deps: React.DependencyList\n): [(...a: Parameters<F>) => Promise<T>, T, any, boolean];\n")))}n.isMDXComponent=!0;var o={editThisPagePath:"src/pages/hooks/usePromiseCallback/index.mdx"};for(var p in o)window[p]=o[p]}},function(a){a.O(0,[4526,3531,164,4183,4109,9774,2888,179],function(){var b;return a(a.s=15694)}),_N_E=a.O()}])