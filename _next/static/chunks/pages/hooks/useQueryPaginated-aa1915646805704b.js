(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6311],{54383:function(e,a,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/hooks/useQueryPaginated",function(){return n(7896)}])},7896:function(e,a,n){"use strict";n.r(a),n.d(a,{default:function(){return i},meta:function(){return t}});var r=n(31373);n(27378);var o=n(35318),t={name:"useQueryPaginated",tableOfContents:{depth:0,children:[{depth:1,slug:"#usequerypaginated",title:"useQueryPaginated",children:[{depth:2,slug:"#como-usar",title:"Como usar"},{depth:2,slug:"#cuidados",title:"Cuidados"},{depth:2,slug:"#par\xe2metros-e-retorno",title:"Par\xe2metros e Retorno"}]}]}},s={meta:t};function i(e){var a=e.components,n=(0,r.Z)(e,["components"]);return(0,o.kt)("wrapper",Object.assign({},s,n,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h1",Object.assign({},{id:"usequerypaginated"}),"useQueryPaginated"),(0,o.kt)("p",null,"Hook para facilitar o uso de uma promise paginada, d\xe1 subscribe e retorna\no resultado junto com fun\xe7\xf5es de manipula\xe7\xe3o dos parametros."),(0,o.kt)("h2",Object.assign({},{id:"como-usar"}),"Como usar"),(0,o.kt)("pre",null,(0,o.kt)("code",Object.assign({parentName:"pre"},{className:"language-ts"}),"const {\n  // extra props added by hook\n  initialParams,\n  refresh,\n  params,\n  mergeParams,\n  handleSort,\n  handleChangePage,\n  handleChangePerPage,\n  // query original response\n  ...queryResult\n} = useQueryPaginated(\n  {\n    initialParams: { page: 1, perPage: 40 }, // optional\n    queryFn: params => salesService.list(params)\n  },\n  []\n);\n")),(0,o.kt)("h2",Object.assign({},{id:"cuidados"}),"Cuidados"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Erros")," ocorridos ser\xe3o automaticamentes logados se as o ",(0,o.kt)("strong",{parentName:"li"},"onUnhandledError")," no\n",(0,o.kt)("strong",{parentName:"li"},"setHoustonHooksConfig")," for configurado.")),(0,o.kt)("h2",Object.assign({},{id:"par\xe2metros-e-retorno"}),"Par\xe2metros e Retorno"),(0,o.kt)("pre",null,(0,o.kt)("code",Object.assign({parentName:"pre"},{className:"language-ts"}),"/**\n * @param options `UseQueryPaginatedOptions`: {\n *  initialParams: Estado inicial dos param\xeatros\n *  queryFn: Fun\xe7\xe3o que recebe os param\xeatros e retorna uma Promise\n *  ...Todas as propriedades do useQuery original\n * }\n * @param deps React deps\n * @returns `UseQueryPaginated`: {\n *  params: P / Json com os parametros\n *  initialParams: Partial<P> / Json com os parametros iniciais, \xfatil para um reset de filtros\n *  refresh: () => void; / Fun\xe7\xe3o de refresh\n *  mergeParams: (params: PaginationMergeParams<P>) => void; / Fun\xe7\xe3o para atualizar os paramentros pode ser o valor em s\xed o uma fun\xe7\xe3o que recebe o valor atual\n *  handleChangePage: (page: number) => void; / Fun\xe7\xe3o de atalho para o mergeParams({ page: 1})\n *  handleChangePerPage: (perPage: number) => void; / Fun\xe7\xe3o de atalho para o mergeParams({ perPge: 1})\n *  handleSort: (sortField: string, sortDirection: 'asc' | 'desc') => void; / Fun\xe7\xe3o de atalho para o mergeParams({ sortField, sortDirection })\n *  ...Todas as propriedades de retorno do useQuery original\n * }\n */\nexport default function useQueryPaginated<P extends PaginationParams, R>(options: UseQueryOptions<P, R>, , deps: React.DependencyList): UsePaginatedPromise<P, R>\n")))}i.isMDXComponent=!0;var u={editThisPagePath:"src/pages/hooks/useQueryPaginated/index.mdx"};for(var d in u)window[d]=u[d]},31373:function(e,a,n){"use strict";function r(e,a){if(null==e)return{};var n,r,o=function(e,a){if(null==e)return{};var n,r,o={},t=Object.keys(e);for(r=0;r<t.length;r++)n=t[r],a.indexOf(n)>=0||(o[n]=e[n]);return o}(e,a);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(r=0;r<t.length;r++)n=t[r],!(a.indexOf(n)>=0)&&Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}n.d(a,{Z:function(){return r}})}},function(e){e.O(0,[9774,2888,179],function(){return e(e.s=54383)}),_N_E=e.O()}]);